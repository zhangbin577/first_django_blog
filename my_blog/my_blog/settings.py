"""
Django settings for my_blog project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'zcczczczczczcz'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False  # False：关闭调试模式

ALLOWED_HOSTS = ["*"]  # 允许的服务器，这里"*"所有请求，实际部署改为"['域名','ip']"


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "article",
    "userprofile",
    # django搜索app的机制是django框架会优先找你写的app，若没有则继续在sitePackages里找。(无需startapp）
    "password_reset",  # 新增第三方app"Django-password-reset"(重置密码)
    "comment",
    "taggit",    # 新增：第三方库"Django-taggit"(文章"标签")
    "ckeditor",  # 新增：第三方库"django-ckeditor"(丰富"评论"的书写)————基于JS的富文本编辑器！
    "mptt",      # 新增：第三方库"django-mptt"(树形数据结构)，实现多级评论！
    "notifications",  # 新增："django-notifications-hq"，给评论增加"消息通知"功能！
    "notice",    # 新建：通知"app"，集中处理通知"已读/未读"。

    # allauth：启动必须项 (新增"django-allauth"第三方登录)
    "django.contrib.sites",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    # 添加：需要的第三方登录(github/WeiXin/Weibo，allauth好像不支持QQ)
    "allauth.socialaccount.providers.github",
    "allauth.socialaccount.providers.weibo",

]

# bolg第三方登录：设置站点
SITE_ID = 1
# 设置：等录成功后的"重定向"地址。——————allauth库：默认登录页地址"127..8000/accounts/login/"，登录后，就跳到list页！
# LOGIN_REDIRECT_URL = "/article/article-list"
LOGIN_REDIRECT_URL = "/"  # 即：改为blog网站的"首页"
# 新增：变量"后端认证"
AUTHENTICATION_BACKENDS = (
    # Django后台可独立于allauth登录
    "django.contrib.auth.backends.ModelBackend",
    # 配置：allauth独有的认证方法，如email登录
    "allauth.account.auth_backends.AuthenticationBackend",
)


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'my_blog.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,"templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                # 它是：allauth启动必须项，(建项目时，已自带建好了)
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'my_blog.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'my_blog',
        "USER": "root",
        "PASSWORD": "1234669",
        "HOST": "127.0.0.1",
        "PORT": 3306,
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = (os.path.join(BASE_DIR, "static"),)


# 配置：重置密码里，发送邮件的账号、端口等信息。——————若有问题：建议换"其它服务商的(网易)"邮箱！
# SMTP协议：简单邮件传输协议(Simple Mail Transfer Protocol)是在Internet上传输Email的协议标准。
# 是基于文本的协议。在其之上指定了1条消息的1个/多个接收者，然后消息文本会被传输。SMTP使用TCP端口25。
# SMTP是一个"推"的协议(发邮件)，它不允许从远程服务器上"拉"来消息(收邮件)。要接收邮件，客户端必须使用POP3或IMAP。

# SMTP服务器：改为你邮箱的smtp
EMAIL_HOST = 'smtp.qq.com'  # 注意：要在qq邮箱中开启"SMTP服务"！
# 改为你的邮箱名！
EMAIL_HOST_USER = "123568@qq.com"
# 邮箱的密码
EMAIL_HOST_PASSWORD = "daaddawd15515"  # python作为第3方客户端登录，应当使用“授权码”替代密码用作登陆。
# 发送邮件的端口
EMAIL_PORT = 25
# 是否使用TLS ——————"TLS"：安全传输层协议，用于在2个通信应用程序间，提供保密性和数据完整性！
EMAIL_USE_TLS = True
# 默认的发邮件人
# DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
DEFAULT_FROM_EMAIL = "zb的博客<123456@qq.com>"  # 注意：<>尖括号内是你的"邮箱名"！


# 媒体文件地址：如"Profile()中，用户头像"avatar"
MEDIA_URL = "/media/"  # 用户上传文件的"访问地址"
MEDIA_ROOT = os.path.join(BASE_DIR,"media/")  # 用户上传文件的本地"保存地址" ———————即：/media/avatar/%Y%m%d/


# "ckeditor"富文本编辑器：配置，适合自己的一些功能。(可不配置"CKEDITOR_CONFIGS"，就用默认全部功能！)
CKEDITOR_CONFIGS = {
    # django-ckeditor默认用的default配置
    "default":{
        # 编辑器宽度自适应
        "width":"auto",
        "height":"250px",
        # tab键转换空格数
        "tabSpaces":4,
        # 工具栏风格
        "toolbar":"Custom",
        # 工具栏按钮 ——————它中：定义要使用的功能模块！
        "toolbar_Custom":[
            # 表情、代码块
            ["Smiley", "CodeSnippet"],
            # 字体风格
            ["Bold","Italic","Underline","RemoveFormat","Blockquote"],
            # 字体颜色
            ["TextColor","BGColor"],
            # 链接
            ["Link","Unlink"],
            # 列表
            ["NumberedList","BulletedList"],
            # 最大化
            ["Maximize"]
        ],
        # 加入代码块插件"codesnippet" ——————:编辑器自带的插件！加上"Prism"
        "extraPlugins":",".join(["codesnippet","prism","widget","lineutils"]),
    }
}


# 学完测试：接着学习"日志"，"记录"程序的错误等信息！
# 日志：指程序在运行过程中。对状态、时间、错误等信息的记录，即把运行时产生的信息输出保存起来，供开发者查阅！
# 配置"日志"：Django日志，是使用Python内置的"logging模块"处理日志！——————用字典{}的形式对项目的日志进行配置！
# import os
# LOGGING = {  # 定义1个logging{}配置项，描述了你想要的"logger\handler\filter\formatter"
#     "version":1,  # 指明配置版本
#     "disable_existing_loggers":False,  # 指明：是否禁用默认配置的记录器
#     "handlers":{
#         "file":{  # 即"file"处理器
#             "level":"INFO",
#             # 注释掉"class"，改为"分割"日志，不然一直往debug.log中写入，那会变多大！
#             # "class":"logging.FileHandler",  # 定义将消息输出到文件中
#             # 新增内容：
#             "class":"logging.handlers.TimedRotatingFileHandler",  # "Time..Handler"：python内置的随时间分割日志文件的模块
#             "when":"midnight",  # 分割时间为"凌晨"(午夜)
#             "backupCount":30,   # 日志文件保存日期为"30天"
#             "filename":os.path.join(BASE_DIR,"logs/debug.log"),  # 文件地址"logs/debug.log"
#         },
#     },
#     "loggers":{  # 1条消息是先传给logger的，它中用了内置的django记录器，处理debug级别以上的消息
#         "django":{
#             "handlers":["file"],  # 把消息传给叫"file"的处理器
#             "level":"INFO",
#             "propagate":True,  # 即：本记录器处理过的消息，其它记录器也可继续处理
#         },
#     },
#     # 注意1：并没有配置"filters/formatters"，因此采用默认的设置！
#     # 注意2：日志的输出文件目录"logs/"，要提前"创建好"，且项目拥有目录的写入权限！
#     # 以上是：Django中使用默认配置的记录器，即在setting.py中设置=False
#     # 自定义日志记录：即在需要的app中view.py设置！（导入"setting中的LOGGING，导入logging库"）
# }


# 静态文件收集目录：项目部署用
STATIC_ROOT = os.path.join(BASE_DIR,"collected_static")
